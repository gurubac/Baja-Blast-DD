<!DOCTYPE html>
<html lang="en" style="color: rgb(0, 0, 0); font-family: Aclonica, sans-serif">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no" />
  <title>Baja Blast Down Detector</title>
  <link rel="stylesheet" href="../assets/bootstrap/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Abril+Fatface&amp;display=swap" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Aclonica&amp;display=swap" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Alatsi&amp;display=swap" />
  <link rel="stylesheet" href="../assets/css/styles.css" />
  <link rel="stylesheet" href="../styles/dropdown.css" />
  <link rel="stylesheet" href="../styles/gradient-navbar-1.css" />
  <link rel="stylesheet" href="../styles/gradient-navbar.css" />
  <link rel="stylesheet" href="../styles/Navbar---Logo-Middle---Phone-Logo-Middle.css" />
  <link rel="stylesheet" href="../styles/styles.css" />
  <!-- favicon -->
  <link rel="shortcut icon" href="../img/favicon.ico" type="image/x-icon">
</head>
<style>
  html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }

   #map {
      height: 100%;
      width: 60%;
      background-color: rgb(110, 110, 110);
      margin : 0 auto;

    }

    #panel {
      height: 100%;
      width: null;
      background-color: white;
      position: fixed;
      z-index: 1;
      overflow-x: hidden;
      transition: all .2s ease-out;
    }

    .open {
      width: 250px;
    }

    /* Styling for place details */
    .hero {
      width: 100%;
      height: auto;
      max-height: 166px;
      display: block;
    }

    .place,
    p {
      font-family: 'open sans', arial, sans-serif;
      padding-left: 18px;
      padding-right: 18px;
    }

    .details {
      color: darkslategrey;
    }

</style>
<body style="
  display: flex;
  flex-direction : column;
  min-height: 100vh;
  color: #3b92c3;
  background: rgb(40, 44, 44);
  font-family: Alatsi, sans-serif;
  width: 100%; ">
  <div id=" divtop" style="
        border-color: rgb(75, 166, 52);
        width: 100%;
        height: 10%; 
        filter: saturate(150%);
      ">
    <nav class="navbar navbar-dark navbar-expand-lg" id="app-navbar" style="width: 100%; align-content: center">
      <div class="container-fluid">
        <a class="navbar-brand" href="#" style="padding-top: 5px; margin-right: 26px"><img src="../img/bajablast.png"
            style="
                width: 60px;
                padding-right: 0px;
                margin-bottom: 0px;
                margin-right: 0px;
                margin-left: 12px;
              " /></a>
        <div>
          <h1 style="font-size: 227%; color: rgb(0, 0, 0); margin-left: 4px">
            Baja Blast
          </h1>
          <h1 style="
                font-size: 122%;
                text-align: center;
                color: rgb(0, 0, 0);
                margin-left: 4px;
              ">
            Down Detector
          </h1>
        </div>
        <img src="../img/bell.png" style="width: 59px; transform: translate(6px); margin-right: 1%" />
        <button data-bs-toggle="collapse" class="navbar-toggler" data-bs-target="#navcol-1" style="
              filter: brightness(200%) invert(100%) saturate(100%);
              border: 2px solid rgb(60, 113, 42);
              margin-right: -10px;
              margin-left: 4px;
            ">
          <span class="visually-hidden">Toggle navigation</span><span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navcol-1">
          <ul class="navbar-nav ml-auto">
            <li class="nav-item">
              <a class="nav-link active" href="#" style="color: rgb(0, 0, 0)">About Us</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="https://github.com/gurubac/bajablastr" style="color: rgb(0, 0, 0)">Github</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#" style="color: rgb(0, 0, 0)">Contact</a>
            </li>
          </ul>
        </div>
        <div></div>
      </div>
    </nav>
  </div>

  <!-- search bar code -->
  <div class="center" style="margin-top: 10px; margin-bottom: 10px" ;>
    <input class = "corners"  type="text" id="myInput" onkeyup="searchAddress()" placeholder="Enter a location..." title="Type in a name">
    <ul id="myUL">
      <%locationList.forEach(location=> {%>
        <li style="border-radius: 20px;border-width: 5px;border-style: solid;">
          
          <a href="<%= `${location.address}` %> ">
            <%= `${location.address}, ${location.city} ${location.state} ${location.zip}` %>
          </a>
        </li>
        
        <%})%>
    </ul>
  </div>
  <div id="panel"></div>

  <!-- Map appears here -->
  <div id="map"></div>

  <footer style="background: rgb(36, 36, 36); text-align: center; margin-top: auto; padding:10px ;">
    <h4 style="color:rgb(202, 202, 202); ">Baja Blast DD - Made by<span style="color:rgb(91, 243, 159);"> Guru
      </span>and <span style="color:rgb(184, 105, 230)">Mahir</span></h4>
  </footer>

  <!-- Search bar front end filter code -->
  <script>
    function searchAddress() {
      //First, set visibility of the unordered list once user enter text 
      //Then search for results :O 
      var input, filter, ul, li, a, i, txtValue;
      input = document.getElementById("myInput");
      filter = input.value.toUpperCase();
      ul = document.getElementById("myUL");
      li = ul.getElementsByTagName("li");
      //setting visibility first

      if (ul.style.display === "none") {
        ul.style.display = "inline";
      } else if(input.value.length == 0){
        ul.style.display = "none"
      } else {
        ul.style.display = "inline";
      }
      //searching for items
      for (i = 0; i < li.length; i++) {
        a = li[i].getElementsByTagName("a")[0];
        txtValue = a.textContent || a.innerText;
        //if text matches, show the matching item
        if (txtValue.toUpperCase().indexOf(filter) > -1) {
          li[i].style.display = "";
        } else {
          //if text does not match the item, do not show the item
          li[i].style.display = "none";
        }
      }
    }
  </script>
  <script src="../assets/bootstrap/js/bootstrap.min.js"></script>
  <script>
    /* Note: This example requires that you consent to location sharing when
     * prompted by your browser. If you see the error "Geolocation permission
     * denied.", it means you probably did not give permission for the browser * to locate you. */
    let pos;
    let map;
    let bounds;
    let infoWindow;
    let currentInfoWindow;
    let service;
    let infoPane;
    function initMap() {
      // Initialize variables
      bounds = new google.maps.LatLngBounds();
      infoWindow = new google.maps.InfoWindow;
      currentInfoWindow = infoWindow;
      /* TODO: Step 4A3: Add a generic sidebar */
      infoPane = document.getElementById('panel');

      // Try HTML5 geolocation
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
          pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          map = new google.maps.Map(document.getElementById('map'), {
            center: pos,
            zoom: 15
          });
          bounds.extend(pos);

          infoWindow.setPosition(pos);
          infoWindow.setContent('Click on the pins to view nearby Taco Bell locations.');
          infoWindow.open(map);
          map.setCenter(pos);

          // Call Places Nearby Search on user's location
          getNearbyPlaces(pos);
        }, () => {
          // Browser supports geolocation, but user has denied permission
          handleLocationError(true, infoWindow);
        });
      } else {
        // Browser doesn't support geolocation
        handleLocationError(false, infoWindow);
      }
    }

    // Handle a geolocation error
    function handleLocationError(browserHasGeolocation, infoWindow) {
      // Set default location to Sydney, Australia
      pos = { lat: -33.856, lng: 151.215 };
      map = new google.maps.Map(document.getElementById('map'), {
        center: pos,
        zoom: 15
      });

      // Display an InfoWindow at the map center
      infoWindow.setPosition(pos);
      infoWindow.setContent(browserHasGeolocation ?
        'Geolocation permissions denied. Using default location.' :
        'Error: Your browser doesn\'t support geolocation.');
      infoWindow.open(map);
      currentInfoWindow = infoWindow;

      // Call Places Nearby Search on the default location
      getNearbyPlaces(pos);
    }

    // Perform a Places Nearby Search Request
    function getNearbyPlaces(position) {
      let request = {
        location: position,
        rankBy: google.maps.places.RankBy.DISTANCE,
        keyword: 'Taco Bell'
      };

      service = new google.maps.places.PlacesService(map);
      service.nearbySearch(request, nearbyCallback);
    }

    // Handle the results (up to 20) of the Nearby Search
    function nearbyCallback(results, status) {
      if (status == google.maps.places.PlacesServiceStatus.OK) {
        createMarkers(results);
      }
    }

    // Set markers at the location of each place result
    function createMarkers(places) {
      places.forEach(place => {
        let marker = new google.maps.Marker({
          position: place.geometry.location,
          map: map,
          title: place.name
        });

        /* TODO: Step 4B: Add click listeners to the markers */
        // Add click listener to each marker
        google.maps.event.addListener(marker, 'click', () => {
          let request = {
            placeId: place.place_id,
            fields: ['name', 'formatted_address', 'geometry', 'rating',
              'website', 'photos']
          };

          /* Only fetch the details of a place when the user clicks on a marker.
           * If we fetch the details for all place results as soon as we get
           * the search response, we will hit API rate limits. */
          service.getDetails(request, (placeResult, status) => {
            showDetails(placeResult, marker, status)
          });
        });

        // Adjust the map bounds to include the location of this marker
        bounds.extend(place.geometry.location);
      });
      /* Once all the markers have been placed, adjust the bounds of the map to
       * show all the markers within the visible area. */
      map.fitBounds(bounds);
    }

    /* TODO: Step 4C: Show place details in an info window */
    // Builds an InfoWindow to display details above the marker
    function showDetails(placeResult, marker, status) {
      if (status == google.maps.places.PlacesServiceStatus.OK) {
        let placeInfowindow = new google.maps.InfoWindow();
        let rating = "None";
        if (placeResult.rating) rating = placeResult.rating;
        placeInfowindow.setContent('<div><strong>' + placeResult.name +
          '</strong><br>' + 'Rating: ' + rating + '</div>');
        placeInfowindow.open(marker.map, marker);
        currentInfoWindow.close();
        currentInfoWindow = placeInfowindow;
        showPanel(placeResult);
      } else {
        console.log('showDetails failed: ' + status);
      }
    }

    /* TODO: Step 4D: Load place details in a sidebar */
    // Displays place details in a sidebar
    function showPanel(placeResult) {
      // If infoPane is already open, close it
      if (infoPane.classList.contains("open")) {
        infoPane.classList.remove("open");
      }

      // Clear the previous details
      while (infoPane.lastChild) {
        infoPane.removeChild(infoPane.lastChild);
      }

      /* TODO: Step 4E: Display a Place Photo with the Place Details */
      // Add the primary photo, if there is one
      if (placeResult.photos) {
        let firstPhoto = placeResult.photos[0];
        let photo = document.createElement('img');
        photo.classList.add('hero');
        photo.src = firstPhoto.getUrl();
        infoPane.appendChild(photo);
      }

      // Add place details with text formatting
      let name = document.createElement('h1');
      name.classList.add('place');
      name.textContent = placeResult.name;
      infoPane.appendChild(name);
      if (placeResult.rating) {
        let rating = document.createElement('p');
        rating.classList.add('details');
        rating.textContent = `Rating: ${placeResult.rating} \u272e`;
        infoPane.appendChild(rating);
      }
      let address = document.createElement('p');
      address.classList.add('details');
      address.textContent = placeResult.formatted_address;
      infoPane.appendChild(address);
      if (placeResult.website) {
        let websitePara = document.createElement('p');
        let websiteLink = document.createElement('a');
        let websiteUrl = document.createTextNode(placeResult.website);
        websiteLink.appendChild(websiteUrl);
        websiteLink.title = placeResult.website;
        websiteLink.href = placeResult.website;
        websitePara.appendChild(websiteLink);
        infoPane.appendChild(websitePara);
      }

      // Open the infoPane
      infoPane.classList.add("open");
    }
  </script>

<script async defer
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCRux7Rt1Vq6rO-zjtfQ7zYxUQabz3suOY&libraries=places&callback=initMap">
</script>
</body>

</html>